[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BuildingBlocks",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/teja00/BuildingBlocks.git\nor from conda\n$ conda install -c teja00 BuildingBlocks\nor from pypi\n$ pip install BuildingBlocks",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "BuildingBlocks",
    "section": "Developer Guide",
    "text": "Developer Guide\n\nInstall BuildingBlocks in Development mode\n# make sure BuildingBlocks package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to BuildingBlocks\n$ nbdev_prepare",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "BuildingBlocks",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/teja00/BuildingBlocks.git\nor from conda\n$ conda install -c teja00 BuildingBlocks\nor from pypi\n$ pip install BuildingBlocks",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#testing-matrix-vector-dot-product",
    "href": "index.html#testing-matrix-vector-dot-product",
    "title": "BuildingBlocks",
    "section": "Testing Matrix-Vector Dot Product",
    "text": "Testing Matrix-Vector Dot Product\n\nInitialize a Matrix and a Vector\n# pass test case\na = [[1, 2], [2, 4]]\nb = [1, 2]\nres = [5, 10]\n# fail test case\na = [[1, 2], [2, 4]]\nb = [1, 2]\nres = [5, 11]\n\n::: {#cell-10 .cell}\n``` {.python .cell-code}\nresult = matrix_dot_vector([[1, 2], [2, 4]], [1, 2])\nassert result == [5, 10], \"Test failed\"\nprint(\"Test passed!\")\n\nTest passed!\n\n:::\n\nresult = matrix_dot_vector([[1, 2], [2, 4]], [1, 2])\n# assert result == [5, 11], \"Test failed: Expected [5, 11], got \" + str(result)\n# print(\"Test passed!\")  # This won't run\n\n\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\nCell In[11], line 2\n      1 result = matrix_dot_vector([[1, 2], [2, 4]], [1, 2])\n----&gt; 2 assert result == [5, 11], \"Test failed: Expected [5, 11], got \" + str(result)\n      3 print(\"Test passed!\")  # This won't run\n\nAssertionError: Test failed: Expected [5, 11], got [5, 10]",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "transpose_of_matrix.html",
    "href": "transpose_of_matrix.html",
    "title": "Transpose of a Matrix",
    "section": "",
    "text": "source\n\ntranspose_matrix\n\n transpose_matrix (a:List[List[Union[int,float]]])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix a of size (n, m)\n\n\nReturns\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix of size (m, n)\n\n\n\n\n\nExported source\ndef transpose_matrix(a: List[List[Union[int, float]]] # matrix a of size (n, m)\n                     ) -&gt; List[List[Union[int, float]]]: # matrix of size (m, n) \n    n, m = len(a[0]), len(a)  # n = number of columns, m = number of rows\n    return [[a[i][j] for i in range(m)] for j in range(n)]",
    "crumbs": [
      "Transpose of a Matrix"
    ]
  },
  {
    "objectID": "transpose_of_matrix.html#simple-implemetation-on-how-to-transpose-a-matrix",
    "href": "transpose_of_matrix.html#simple-implemetation-on-how-to-transpose-a-matrix",
    "title": "Transpose of a Matrix",
    "section": "",
    "text": "def transpose_matrix(a: List[List[Union[int, float]]]) -&gt; List[List[Union[int, float]]]:\n    pass",
    "crumbs": [
      "Transpose of a Matrix"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "matrix_vector_dot_product.html",
    "href": "matrix_vector_dot_product.html",
    "title": "Matrix Vector Dot Product",
    "section": "",
    "text": "source\n\nmatrix_dot_vector\n\n matrix_dot_vector (a:List[List[Union[int,float]]],\n                    b:List[Union[int,float]])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nMatrix ’ a’ of size m x n\n\n\nb\ntyping.List[typing.Union[int, float]]\nVector ’ b’ of size n x 1\n\n\nReturns\ntyping.List[typing.Union[int, float]]\nResulting vector of size m x 1:\n\n\n\n\n\nExported source\ndef matrix_dot_vector(a: List[List[Union[int, float]]] # Matrix ' a' of size m x n\n                      , b: List[Union[int, float]] # Vector ' b' of size n x 1\n                      ) -&gt; List[Union[int, float]]: # Resulting vector of size m x 1:\n    if not all(len(row) == len(b) for row in a):\n        return -1\n    result = []\n    for row in a:\n        dot = sum(x * y for x, y in zip(row, b))\n        result.append(dot)\n    return result",
    "crumbs": [
      "Matrix Vector Dot Product"
    ]
  },
  {
    "objectID": "matrix_vector_dot_product.html#below-is-a-simple-implementation-of-matrix-dot-vector",
    "href": "matrix_vector_dot_product.html#below-is-a-simple-implementation-of-matrix-dot-vector",
    "title": "Matrix Vector Dot Product",
    "section": "",
    "text": "Return a list where each element is the dot product of a row of ‘a’ with ‘b’. If the number of columns in ‘a’ does not match the length of ‘b’, return -1.\n\n\nsource\n\n\n\n matrix_dot_vector (a:List[List[Union[int,float]]],\n                    b:List[Union[int,float]])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nMatrix ’ a’ of size m x n\n\n\nb\ntyping.List[typing.Union[int, float]]\nVector ’ b’ of size n x 1\n\n\nReturns\ntyping.List[typing.Union[int, float]]\n-&gt; List[Union[int, float]] # Resulting vector of size m x 1:",
    "crumbs": [
      "Matrix Vector Dot Product"
    ]
  },
  {
    "objectID": "index.html#unit-test-suite-for-matrix-dot-product-vector-and-transpose-matrix",
    "href": "index.html#unit-test-suite-for-matrix-dot-product-vector-and-transpose-matrix",
    "title": "BuildingBlocks",
    "section": "Unit Test Suite for Matrix dot product Vector and Transpose Matrix",
    "text": "Unit Test Suite for Matrix dot product Vector and Transpose Matrix\n\n# --- Unit Test Suite ---\n\nclass TestMatrixFunctions(unittest.TestCase):\n    \n    # Tests for matrix_dot_vector\n    def test_dot_basic(self):\n        self.assertEqual(matrix_dot_vector([[1, 2], [2, 4]], [1, 2]), [5, 10])\n\n    def test_dot_zeros(self):\n        self.assertEqual(matrix_dot_vector([[0, 0], [0, 0]], [1, 2]), [0, 0])\n\n    def test_dot_identity(self):\n        self.assertEqual(matrix_dot_vector([[1, 0], [0, 1]], [7, 3]), [7, 3])\n\n    def test_dot_floats(self):\n        self.assertEqual(matrix_dot_vector([[1.5, -2], [-3, 4.5]], [2, 1]), [1.0, -1.5])\n\n    # Tests for transpose_matrix\n    def test_transpose_square(self):\n        self.assertEqual(transpose_matrix([[1, 2], [3, 4]]), [[1, 3], [2, 4]])\n\n    def test_transpose_rectangle(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3], [4, 5, 6]]), [[1, 4], [2, 5], [3, 6]])\n\n    def test_transpose_single_row(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3]]), [[1], [2], [3]])\n\n    def test_transpose_single_column(self):\n        self.assertEqual(transpose_matrix([[1], [2], [3]]), [[1, 2, 3]])\n\n\nunittest.main(argv=[''], verbosity=2, exit=False)\n\ntest_dot_basic (__main__.TestMatrixFunctions) ... ok\ntest_dot_floats (__main__.TestMatrixFunctions) ... ok\ntest_dot_identity (__main__.TestMatrixFunctions) ... ok\ntest_dot_zeros (__main__.TestMatrixFunctions) ... ok\ntest_transpose_rectangle (__main__.TestMatrixFunctions) ... ok\ntest_transpose_single_column (__main__.TestMatrixFunctions) ... ok\ntest_transpose_single_row (__main__.TestMatrixFunctions) ... ok\ntest_transpose_square (__main__.TestMatrixFunctions) ... ok\n\n----------------------------------------------------------------------\nRan 8 tests in 0.006s\n\nOK\n\n\n&lt;unittest.main.TestProgram&gt;",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#testing",
    "href": "index.html#testing",
    "title": "BuildingBlocks",
    "section": "Testing",
    "text": "Testing\nImport the following to test out the functionalities\nfrom BuildingBlocks.matrix_vector_dot_product import *\nfrom BuildingBlocks.transpose_matrix import *\nfrom BuildingBlocks.reshape_matrix import *\n\nUnit Test Suite for Matrix dot product Vector\n\nclass TestMatrixDotVector(unittest.TestCase):\n    \n    # Tests for matrix_dot_vector\n    def test_dot_basic(self):\n        self.assertEqual(matrix_dot_vector([[1, 2], [2, 4]], [1, 2]), [5, 10])\n\n    def test_dot_zeros(self):\n        self.assertEqual(matrix_dot_vector([[0, 0], [0, 0]], [1, 2]), [0, 0])\n\n    def test_dot_identity(self):\n        self.assertEqual(matrix_dot_vector([[1, 0], [0, 1]], [7, 3]), [7, 3])\n\n    def test_dot_floats(self):\n        self.assertEqual(matrix_dot_vector([[1.5, -2], [-3, 4.5]], [2, 1]), [1.0, -1.5])\n\n\n\nUnit TestSuite for Transpose Matrix\n\nclass TestMatrixTranspose(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_transpose_square(self):\n        self.assertEqual(transpose_matrix([[1, 2], [3, 4]]), [[1, 3], [2, 4]])\n\n    def test_transpose_rectangle(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3], [4, 5, 6]]), [[1, 4], [2, 5], [3, 6]])\n\n    def test_transpose_single_row(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3]]), [[1], [2], [3]])\n\n    def test_transpose_single_column(self):\n        self.assertEqual(transpose_matrix([[1], [2], [3]]), [[1, 2, 3]])\n\n\n\nUnit TestSuite for Reshaping Matrix\n\nclass TestMatrixReshape(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_reshape_basic(self):\n        self.assertEqual(reshape_matrix([[1,2,3,4],[5,6,7,8]], (4, 2)), [[1, 2], [3, 4], [5, 6], [7, 8]])\n\n    def test_transpose_different_size(self):\n        self.assertEqual(reshape_matrix([[1, 2, 3, 4], [5, 6, 7, 8]], (1, 4)), [])\n\n    def test_transpose_same_size(self):\n        self.assertEqual(reshape_matrix([[1,2,3,4],[5,6,7,8]], (2, 4)), [[1, 2, 3, 4], [5, 6, 7, 8]])\n\n\nunittest.main(argv=[''], verbosity=2, exit=False)\n\ntest_dot_basic (__main__.TestMatrixDotVector) ... ok\ntest_dot_floats (__main__.TestMatrixDotVector) ... ok\ntest_dot_identity (__main__.TestMatrixDotVector) ... ok\ntest_dot_zeros (__main__.TestMatrixDotVector) ... ok\ntest_reshape_basic (__main__.TestMatrixReshape) ... ok\ntest_transpose_different_size (__main__.TestMatrixReshape) ... ok\ntest_transpose_same_size (__main__.TestMatrixReshape) ... ok\ntest_transpose_rectangle (__main__.TestMatrixTranspose) ... ok\ntest_transpose_single_column (__main__.TestMatrixTranspose) ... ok\ntest_transpose_single_row (__main__.TestMatrixTranspose) ... ok\ntest_transpose_square (__main__.TestMatrixTranspose) ... ok\n\n----------------------------------------------------------------------\nRan 11 tests in 0.294s\n\nOK\n\n\n&lt;unittest.main.TestProgram&gt;",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "reshape_matrix.html",
    "href": "reshape_matrix.html",
    "title": "Reshape of a Matrix",
    "section": "",
    "text": "the line of code would flatten the matrix of size m by n =&gt; which would have a size m*n\nflat = np.array(a).flatten()\nThe below line of code is a list comprehension, and we are picking blocks of cols  let’s say cols = 10 i.e from  [0, 10]  [10, 20] \nreshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n\n\n\n reshape_matrix (a:List[List[Union[int,float]]], new_shape:tuple)\n\n\n\nExported source\ndef reshape_matrix( a: List[List[Union[int, float]]],\n                    new_shape: tuple[int, int]\n                    ) -&gt; list[list[Union[int,float]]]:\n    flat = np.array(a).flatten()\n\n    # Validate the reshape is possible\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n\n    # Manually reshape using slicing\n    reshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n    return reshaped_matrix",
    "crumbs": [
      "Reshape of a Matrix"
    ]
  },
  {
    "objectID": "reshape_matrix.html#algorithm-explanation",
    "href": "reshape_matrix.html#algorithm-explanation",
    "title": "Reshape of a Matrix",
    "section": "",
    "text": "the line of code would flatten the matrix of size m by n =&gt; which would have a size m*n\nflat = np.array(a).flatten()\nThe below line of code is a list comprehension, and we are picking blocks of cols  let’s say cols = 10 i.e from  [0, 10]  [10, 20] \nreshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n\n\n\n reshape_matrix (a:List[List[Union[int,float]]], new_shape:tuple)\n\n\n\nExported source\ndef reshape_matrix( a: List[List[Union[int, float]]],\n                    new_shape: tuple[int, int]\n                    ) -&gt; list[list[Union[int,float]]]:\n    flat = np.array(a).flatten()\n\n    # Validate the reshape is possible\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n\n    # Manually reshape using slicing\n    reshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n    return reshaped_matrix",
    "crumbs": [
      "Reshape of a Matrix"
    ]
  }
]