[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BuildingBlocks",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/teja00/BuildingBlocks.git\nor from conda\n$ conda install -c teja00 BuildingBlocks\nor from pypi\n$ pip install BuildingBlocks",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "BuildingBlocks",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/teja00/BuildingBlocks.git\nor from conda\n$ conda install -c teja00 BuildingBlocks\nor from pypi\n$ pip install BuildingBlocks",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "index.html#testing",
    "href": "index.html#testing",
    "title": "BuildingBlocks",
    "section": "Testing",
    "text": "Testing\nImport the following to test out the functionalities\nfrom BuildingBlocks.matrix_vector_dot_product import *\nfrom BuildingBlocks.transpose_matrix import *\nfrom BuildingBlocks.reshape_matrix import *\nfrom BuildingBlocks.mean_row_column import *\nfrom BuildingBlocks.matrix_scalar_multiply import *\n\nUnit Test Suite for Matrix dot product Vector\n\nclass TestMatrixDotVector(unittest.TestCase):\n    \n    # Tests for matrix_dot_vector\n    def test_dot_basic(self):\n        self.assertEqual(matrix_dot_vector([[1, 2], [2, 4]], [1, 2]), [5, 10])\n\n    def test_dot_zeros(self):\n        self.assertEqual(matrix_dot_vector([[0, 0], [0, 0]], [1, 2]), [0, 0])\n\n    def test_dot_identity(self):\n        self.assertEqual(matrix_dot_vector([[1, 0], [0, 1]], [7, 3]), [7, 3])\n\n    def test_dot_floats(self):\n        self.assertEqual(matrix_dot_vector([[1.5, -2], [-3, 4.5]], [2, 1]), [1.0, -1.5])\n\n\n\nUnit TestSuite for Transpose Matrix\n\nclass TestMatrixTranspose(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_transpose_square(self):\n        self.assertEqual(transpose_matrix([[1, 2], [3, 4]]), [[1, 3], [2, 4]])\n\n    def test_transpose_rectangle(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3], [4, 5, 6]]), [[1, 4], [2, 5], [3, 6]])\n\n    def test_transpose_single_row(self):\n        self.assertEqual(transpose_matrix([[1, 2, 3]]), [[1], [2], [3]])\n\n    def test_transpose_single_column(self):\n        self.assertEqual(transpose_matrix([[1], [2], [3]]), [[1, 2, 3]])\n\n\n\nUnit TestSuite for Reshaping Matrix\n\nclass TestMatrixReshape(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_reshape_basic(self):\n        self.assertEqual(reshape_matrix([[1,2,3,4],[5,6,7,8]], (4, 2)), [[1, 2], [3, 4], [5, 6], [7, 8]])\n\n    def test_transpose_different_size(self):\n        self.assertEqual(reshape_matrix([[1, 2, 3, 4], [5, 6, 7, 8]], (1, 4)), [])\n\n    def test_transpose_same_size(self):\n        self.assertEqual(reshape_matrix([[1,2,3,4],[5,6,7,8]], (2, 4)), [[1, 2, 3, 4], [5, 6, 7, 8]])\n\n\n\nUnit TestSuite for Mean by Row or column\n\nclass TestMeanMatrix(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_mean_basic(self):\n        self.assertEqual(calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]],'column'), [4.0, 5.0, 6.0])\n\n\n\nUnit TestSuite for Matrix Scalar Multiplication\n\nclass TestMatrixMulScalar(unittest.TestCase):\n    # Tests for transpose_matrix\n    def test_mul_scalar_basic(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], 2), [[2, 4], [6, 8]])\n    def test_mul_scalar_negative(self):\n        self.assertEqual(matrix_scalar_multiply([[1, -2], [-3, 4]], -1), [[-1, 2], [3, -4]])\n    def test_mul_scalar_zero(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], 0), [[0, 0], [0, 0]])\n    def test_mul_scalar_float(self):\n        self.assertEqual(matrix_scalar_multiply([[1.5, -2], [-3, 4.5]], 2.0), [[3.0, -4.0], [-6.0, 9.0]])\n    def test_mul_scalar_identity(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], 1), [[1, 2], [3, 4]])\n    def test_mul_scalar_identity_float(self):\n        self.assertEqual(matrix_scalar_multiply([[1.5, 2.5], [3.5, 4.5]], 1.0), [[1.5, 2.5], [3.5, 4.5]])\n    def test_mul_scalar_identity_negative(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], -1), [[-1, -2], [-3, -4]])\n    def test_mul_scalar_identity_zero(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], 0), [[0, 0], [0, 0]])\n    def test_mul_scalar_identity_float_zero(self):\n        self.assertEqual(matrix_scalar_multiply([[1.5, 2.5], [3.5, 4.5]], 0.0), [[0.0, 0.0], [0.0, 0.0]])\n    def test_mul_scalar_identity_negative_float(self):\n        self.assertEqual(matrix_scalar_multiply([[1.5, 2.5], [3.5, 4.5]], -1.0), [[-1.5, -2.5], [-3.5, -4.5]])\n    def test_mul_scalar_identity_negative_zero(self):\n        self.assertEqual(matrix_scalar_multiply([[1, 2], [3, 4]], -0), [[0, 0], [0, 0]])\n    def test_mul_scalar_identity_float_zero(self):\n        self.assertEqual(matrix_scalar_multiply([[1.5, 2.5], [3.5, 4.5]], -0.0), [[0.0, 0.0], [0.0, 0.0]])\n\n\nunittest.main(argv=[''], verbosity=2, exit=False)\n\ntest_dot_basic (__main__.TestMatrixDotVector) ... ok\ntest_dot_floats (__main__.TestMatrixDotVector) ... ok\ntest_dot_identity (__main__.TestMatrixDotVector) ... ok\ntest_dot_zeros (__main__.TestMatrixDotVector) ... ok\ntest_mul_scalar_basic (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_float (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_float (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_float_zero (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_negative (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_negative_float (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_negative_zero (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_identity_zero (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_negative (__main__.TestMatrixMulScalar) ... ok\ntest_mul_scalar_zero (__main__.TestMatrixMulScalar) ... ok\ntest_reshape_basic (__main__.TestMatrixReshape) ... ok\ntest_transpose_different_size (__main__.TestMatrixReshape) ... ok\ntest_transpose_same_size (__main__.TestMatrixReshape) ... ok\ntest_transpose_rectangle (__main__.TestMatrixTranspose) ... ok\ntest_transpose_single_column (__main__.TestMatrixTranspose) ... ok\ntest_transpose_single_row (__main__.TestMatrixTranspose) ... ok\ntest_transpose_square (__main__.TestMatrixTranspose) ... ok\ntest_mean_basic (__main__.TestMeanMatrix) ... ok\n\n----------------------------------------------------------------------\nRan 23 tests in 0.034s\n\nOK\n\n\n&lt;unittest.main.TestProgram&gt;",
    "crumbs": [
      "BuildingBlocks"
    ]
  },
  {
    "objectID": "mean_by_row_column.html",
    "href": "mean_by_row_column.html",
    "title": "Mean by Row or Column",
    "section": "",
    "text": "source\n\ncalculate_matrix_mean\n\n calculate_matrix_mean (matrix:list, mode:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nmatrix\nlist\nMatrix of size m, n\n\n\nmode\nstr\nrepresenting column or row\n\n\nReturns\nlist\nresult of size m, 1 or n, 1\n\n\n\n\n\nExported source\ndef calculate_matrix_mean(  matrix: list[list[Union[int, float]]], # Matrix of size m, n\n                            mode: str # representing column or row\n                          ) -&gt; list[Union[int, float]]: # result of size m, 1 or n, 1\n    matrix = np.array(matrix)\n    \n    if mode == \"row\":\n        means = [np.mean(row) for row in matrix]\n    else:  # assume column mode\n        means = [np.mean(matrix[:, i]) for i in range(matrix.shape[1])]\n    \n    return means",
    "crumbs": [
      "Mean by Row or Column"
    ]
  },
  {
    "objectID": "transpose_of_matrix.html",
    "href": "transpose_of_matrix.html",
    "title": "Transpose of a Matrix",
    "section": "",
    "text": "source\n\ntranspose_matrix\n\n transpose_matrix (a:List[List[Union[int,float]]])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix a of size (n, m)\n\n\nReturns\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix of size (m, n)\n\n\n\n\n\nExported source\ndef transpose_matrix(a: List[List[Union[int, float]]] # matrix a of size (n, m)\n                     ) -&gt; List[List[Union[int, float]]]: # matrix of size (m, n) \n    n, m = len(a[0]), len(a)  # n = number of columns, m = number of rows\n    return [[a[i][j] for i in range(m)] for j in range(n)]",
    "crumbs": [
      "Transpose of a Matrix"
    ]
  },
  {
    "objectID": "reshape_matrix.html",
    "href": "reshape_matrix.html",
    "title": "Reshape of a Matrix",
    "section": "",
    "text": "the line of code would flatten the matrix of size m by n =&gt; which would have a size m*n\nflat = np.array(a).flatten()\nThe below line of code is a list comprehension, and we are picking blocks of cols  letâ€™s say cols = 10 i.e from  [0, 10]  [10, 20] \nreshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\nsource\n\n\n\n reshape_matrix (a:List[List[Union[int,float]]], new_shape:tuple)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix a of size (m, n) of int or float\n\n\nnew_shape\ntuple\nnew shape tuple to reshape into (a, b)\n\n\nReturns\nlist\noutput matrix of shape (a, b)\n\n\n\n\n\nExported source\ndef reshape_matrix( a: List[List[Union[int, float]]], # matrix a of size (m, n) of int or float\n                    new_shape: tuple[int, int] # new shape tuple to reshape into (a, b)\n                    ) -&gt; list[list[Union[int,float]]]: # output matrix of shape (a, b)\n    flat = np.array(a).flatten()\n\n    # Validate the reshape is possible\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n\n    # Manually reshape using slicing\n    reshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n    return reshaped_matrix",
    "crumbs": [
      "Reshape of a Matrix"
    ]
  },
  {
    "objectID": "reshape_matrix.html#algorithm-explanation",
    "href": "reshape_matrix.html#algorithm-explanation",
    "title": "Reshape of a Matrix",
    "section": "",
    "text": "the line of code would flatten the matrix of size m by n =&gt; which would have a size m*n\nflat = np.array(a).flatten()\nThe below line of code is a list comprehension, and we are picking blocks of cols  letâ€™s say cols = 10 i.e from  [0, 10]  [10, 20] \nreshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\nsource\n\n\n\n reshape_matrix (a:List[List[Union[int,float]]], new_shape:tuple)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nmatrix a of size (m, n) of int or float\n\n\nnew_shape\ntuple\nnew shape tuple to reshape into (a, b)\n\n\nReturns\nlist\noutput matrix of shape (a, b)\n\n\n\n\n\nExported source\ndef reshape_matrix( a: List[List[Union[int, float]]], # matrix a of size (m, n) of int or float\n                    new_shape: tuple[int, int] # new shape tuple to reshape into (a, b)\n                    ) -&gt; list[list[Union[int,float]]]: # output matrix of shape (a, b)\n    flat = np.array(a).flatten()\n\n    # Validate the reshape is possible\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n\n    # Manually reshape using slicing\n    reshaped_matrix = [\n        flat[i * new_shape[1] : (i + 1) * new_shape[1]].tolist()\n        for i in range(new_shape[0])\n    ]\n\n    return reshaped_matrix",
    "crumbs": [
      "Reshape of a Matrix"
    ]
  },
  {
    "objectID": "matrix_vector_dot_product.html",
    "href": "matrix_vector_dot_product.html",
    "title": "Matrix Vector Dot Product",
    "section": "",
    "text": "source\n\nmatrix_dot_vector\n\n matrix_dot_vector (a:List[List[Union[int,float]]],\n                    b:List[Union[int,float]])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\na\ntyping.List[typing.List[typing.Union[int, float]]]\nMatrix â€™ aâ€™ of size m x n\n\n\nb\ntyping.List[typing.Union[int, float]]\nVector â€™ bâ€™ of size n x 1\n\n\nReturns\ntyping.List[typing.Union[int, float]]\nResulting vector of size m x 1:\n\n\n\n\n\nExported source\ndef matrix_dot_vector(a: List[List[Union[int, float]]] # Matrix ' a' of size m x n\n                      , b: List[Union[int, float]] # Vector ' b' of size n x 1\n                      ) -&gt; List[Union[int, float]]: # Resulting vector of size m x 1:\n    if not all(len(row) == len(b) for row in a):\n        return -1\n    result = []\n    for row in a:\n        dot = sum(x * y for x, y in zip(row, b))\n        result.append(dot)\n    return result",
    "crumbs": [
      "Matrix Vector Dot Product"
    ]
  },
  {
    "objectID": "matrix_scalar_multiply.html",
    "href": "matrix_scalar_multiply.html",
    "title": "Matrix Scalar Multiply",
    "section": "",
    "text": "source\n\n\n\n matrix_scalar_multiply (matrix:list, scalar:Union[int,float])\n\n\n\n\n\nType\nDetails\n\n\n\n\nmatrix\nlist\nMatrix of size m,n\n\n\nscalar\ntyping.Union[int, float]\nscalar int or float\n\n\nReturns\nlist\nMatrix of size m, n\n\n\n\n\n\nExported source\ndef matrix_scalar_multiply( matrix: list[list[Union[int,float]]], # Matrix of size m,n\n                            scalar: Union[int,float] # scalar int or float\n                           ) -&gt; list[list[Union[int,float]]]: # Matrix of size m, n\n    matrix = np.array(matrix)\n    result = [(row * scalar).tolist() for row in matrix]\n    return result",
    "crumbs": [
      "Matrix Scalar Multiply"
    ]
  },
  {
    "objectID": "matrix_scalar_multiply.html#rudimentary-way-of-doing-matrix-scalar-multiplication",
    "href": "matrix_scalar_multiply.html#rudimentary-way-of-doing-matrix-scalar-multiplication",
    "title": "Matrix Scalar Multiply",
    "section": "",
    "text": "source\n\n\n\n matrix_scalar_multiply (matrix:list, scalar:Union[int,float])\n\n\n\n\n\nType\nDetails\n\n\n\n\nmatrix\nlist\nMatrix of size m,n\n\n\nscalar\ntyping.Union[int, float]\nscalar int or float\n\n\nReturns\nlist\nMatrix of size m, n\n\n\n\n\n\nExported source\ndef matrix_scalar_multiply( matrix: list[list[Union[int,float]]], # Matrix of size m,n\n                            scalar: Union[int,float] # scalar int or float\n                           ) -&gt; list[list[Union[int,float]]]: # Matrix of size m, n\n    matrix = np.array(matrix)\n    result = [(row * scalar).tolist() for row in matrix]\n    return result",
    "crumbs": [
      "Matrix Scalar Multiply"
    ]
  },
  {
    "objectID": "matrix_scalar_multiply.html#matrix-scalar-multiplication-using-numpy",
    "href": "matrix_scalar_multiply.html#matrix-scalar-multiplication-using-numpy",
    "title": "Matrix Scalar Multiply",
    "section": "Matrix Scalar multiplication using numpy",
    "text": "Matrix Scalar multiplication using numpy\n\nsource\n\nmatrix_scalar_multiply_numpy\n\n matrix_scalar_multiply_numpy (matrix:list, scalar:Union[int,float])\n\n\n\n\n\nType\nDetails\n\n\n\n\nmatrix\nlist\nMatrix of size m,n\n\n\nscalar\ntyping.Union[int, float]\nscalar int or float\n\n\nReturns\nlist\nMatrix of size m, n\n\n\n\n\n\nExported source\ndef matrix_scalar_multiply_numpy( matrix: list[list[Union[int,float]]], # Matrix of size m,n\n                            scalar: Union[int,float] # scalar int or float\n                           ) -&gt; list[list[Union[int,float]]]: # Matrix of size m, n\n    result = np.multiply(matrix, scalar)\n    return result",
    "crumbs": [
      "Matrix Scalar Multiply"
    ]
  },
  {
    "objectID": "matrix_scalar_multiply.html#matrix-scalar-multiplication-using-torch",
    "href": "matrix_scalar_multiply.html#matrix-scalar-multiplication-using-torch",
    "title": "Matrix Scalar Multiply",
    "section": "Matrix Scalar multiplication using torch",
    "text": "Matrix Scalar multiplication using torch\n\nsource\n\nmatrix_scalar_multiply_torch\n\n matrix_scalar_multiply_torch (matrix:list, scalar:Union[int,float])\n\n\n\n\n\nType\nDetails\n\n\n\n\nmatrix\nlist\nMatrix of size m,n\n\n\nscalar\ntyping.Union[int, float]\nscalar int or float\n\n\nReturns\nlist\nMatrix of size m, n\n\n\n\n\n\nExported source\ndef matrix_scalar_multiply_torch( matrix: list[list[Union[int,float]]], # Matrix of size m,n\n                            scalar: Union[int,float] # scalar int or float\n                           ) -&gt; list[list[Union[int,float]]]: # Matrix of size m, n\n    result = torch.mul(matrix, scalar)\n    return result",
    "crumbs": [
      "Matrix Scalar Multiply"
    ]
  }
]