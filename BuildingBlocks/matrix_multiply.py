# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_matrix_multiplication.ipynb.

# %% auto 0
__all__ = ['matrix_multiply', 'matrix_multiply_torch', 'matrix_multiply_torch_optimized']

# %% ../nbs/07_matrix_multiplication.ipynb 2
from typing import List, Tuple
import numpy as np
import torch

# %% ../nbs/07_matrix_multiplication.ipynb 4
def matrix_multiply(a: List[List[float]], # input matrix of size (m, n)
                    b: List[List[float]] # input matrix of size (n, p)
                    ) -> List[List[float]]: # output matrix of size (m, p)
    a = np.array(a)
    b = np.array(b)
    ar, ac = a.shape
    br, bc = b.shape
    if ac != br:
        raise ValueError("Incompatible shapes for matrix multiplication")
    result = np.zeros((ar, bc))
    for i in range(ar):
        for j in range(bc):
            for k in range(ac): # or br works too
                result[i][j] += a[i][k] * b[k][j]
    return result.tolist()

# %% ../nbs/07_matrix_multiplication.ipynb 6
def matrix_multiply_torch(a: List[List[float]], # input matrix of size (m, n)
                          b: List[List[float]] # input matrix of size (n, p)
                        ) -> List[List[float]]: # output matrix of size (m, p)
        a = torch.tensor(a)
        b = torch.tensor(b)
        ar, ac = a.shape
        br, bc = b.shape
        if ac != br:
            raise ValueError("Incompatible shapes for matrix multiplication")
        result = torch.zeros((ar, bc))
        for i in range(ar):
            for j in range(bc):
                result[i][j] = torch.sum(a[i, :] * b[:, j])
        return result

# %% ../nbs/07_matrix_multiplication.ipynb 9
def matrix_multiply_torch_optimized(a: List[List[float]], # input matrix of size (m, n)
                                    b: List[List[float]] # input matrix of size (n, p)
                                    ) -> List[List[float]]: # output matrix of size (m, p)
        a = torch.tensor(a)
        b = torch.tensor(b)
        ar, ac = a.shape
        br, bc = b.shape
        if ac != br:
            raise ValueError("Incompatible shapes for matrix multiplication")
        result = torch.zeros((ar, bc))
        for i in range(ar):
              result[i] = (a[i, :].unsqueeze(1) * b).sum(dim = 0)
              print(result[i], a[i, :].unsqueeze(1), b)
        return result

# %% ../nbs/07_matrix_multiplication.ipynb 11
def matrix_multiply_torch_optimized(a: List[List[float]], # input matrix of size (m, n)
                                    b: List[List[float]] # input matrix of size (n, p)
                                    ) -> List[List[float]]: # output matrix of size (m, p)
        a = torch.tensor(a)
        b = torch.tensor(b)
        return np.einsum('ij, jk -> ik', a, b).tolist()
