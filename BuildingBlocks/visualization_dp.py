"""a quick handle to visualize the DP array to better understanding"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/DpVisualization/01_visBruteForce.ipynb.

# %% auto 0
__all__ = ['DPType', 'visualize_dp_history']

# %% ../nbs/DpVisualization/01_visBruteForce.ipynb 3
import ipywidgets as widgets
from IPython.display import display, clear_output
import copy
from typing import Union, List, Any

# %% ../nbs/DpVisualization/01_visBruteForce.ipynb 5
from typing import Union, List, Any, Optional

DPType = Union[
    List[Any],
    List[List[Any]],
    List[List[List[Any]]]
]

def visualize_dp_history(
    dp_history: DPType,                 # List of DP states (various levels)
    extra_vars: Optional[List[Any]] = None  # Optional extra variable tracking
): 
    """
    Returns a widget to visualize the history of a dynamic programming table.
    
    Parameters:
    - dp_history: A list of DP states (can be 1D, 2D, or 3D).
    - extra_vars: (Optional) A list of any extra info (e.g., (i, j) or dicts) to show per step.
    """

    state_index = widgets.IntText(value=0, description="Index:", disabled=True)
    output = widgets.Output()

    def update_display():
        with output:
            clear_output(wait=True)
            i = state_index.value
            print(f"Step {i}:")

            # Display extra vars if provided
            if extra_vars is not None and i < len(extra_vars):
                print(f"Extra: {repr(extra_vars[i])}")

            # Display DP Table
            state = dp_history[i]
            print("DP Table:")
            if isinstance(state, list) and all(isinstance(row, list) for row in state):
                for row in state:
                    print(row)
            else:
                print(state)

    # Buttons
    prev_button = widgets.Button(description="Previous")
    next_button = widgets.Button(description="Next")

    # Button callbacks
    def on_prev_click(b):
        if state_index.value > 0:
            state_index.value -= 1
            update_display()

    def on_next_click(b):
        if state_index.value < len(dp_history) - 1:
            state_index.value += 1
            update_display()

    # Attach callbacks
    prev_button.on_click(on_prev_click)
    next_button.on_click(on_next_click)

    # Initial display
    update_display()

    # Layout
    controls = widgets.HBox([prev_button, next_button])
    display(controls, output)

