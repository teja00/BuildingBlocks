"""Transformation based on the equation: $$ T^{-1} A S$$ Given A, T and S matrices"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_matrix_transformation.ipynb.

# %% auto 0
__all__ = ['determinant_matrix', 'check_invertibility', 'transform_matrix']

# %% ../nbs/06_matrix_transformation.ipynb 2
from typing import List, Union
import numpy as np

# %% ../nbs/06_matrix_transformation.ipynb 3
def determinant_matrix(matrix: np.ndarray # matrix of size (2x2)
                     ) -> float: # determinant of the matrix
    """
    Calculate the determinant of a 2x2 matrix.
    """
    if matrix.shape != (2, 2):
        raise ValueError("Matrix must be 2x2.")
    
    a, b, c, d = matrix.flatten()
    return a * d - b * c

# %% ../nbs/06_matrix_transformation.ipynb 4
def check_invertibility(matrix: np.ndarray # matrix of size (2x2)
                        ) -> bool: # True or False
    """
    Check if a matrix is invertible.
    """
    determinant = determinant_matrix(matrix)
    return determinant != 0  

# %% ../nbs/06_matrix_transformation.ipynb 5
def transform_matrix(A: list[list[Union[int, float]]], # Matrix of shape (n, n)
					T: list[list[Union[int, float]]], # Matrix of shape (n , m)
					S: list[list[Union[int, float]]]  # Matrix of shape (n , k)
                    ) -> list[list[Union[int, float]]]: # Matrix of shape (m, k)
	"""
	Transform a matrix A using a transformation matrix T and a scaling matrix S.
	"""
	if not check_invertibility(np.array(T)) and not check_invertibility(np.array(S)):
		return [-1]
	T = np.array(T)
	a, b, c, d = T.flatten()
	determinant = determinant_matrix(T)
	inverse_T = [[d/ determinant, -b/ determinant], [-c/ determinant, a/ determinant]]
	return inverse_T @ np.array(A) @ S

